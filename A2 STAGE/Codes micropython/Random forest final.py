##HYPER-PARAMETRES RANDOM FOREST :
nb_donnees_pour_classif = 200
seuil_delta = [0.5, 0.7]
seuil_derivee_max = [0.5, 0.7]
seuil_integrale = [0.5, 0.7]
seuil_somme = [1.5, 2.1]
nb_arbres = 10
parametres = ("delta", "integrale", "derivee_max", "somme")
nb_noeuds_min = 0
nb_noeuds_max = 5

deltaf = [[0.003110516, 0.003110516, 0.01355655, 0.01199241, 0.004672846, 0.004672957, 0.003110516, 0.01198751, 0.003110405, 0.01355655, 0.01355655, 0.01355655, 0.01355655, 0.003110405, 0.004672957, 0.003110516, 0.01198751, 0.01513527, 0.01513527, 0.004672846, 0.001552827, 0.01356389, 0.003110406, 0.01356389, 0.01356389, 0.01356389, 0.01513527, 0.01356389, 0.003110405, 0.01356389, 0.01198762, 0.01356389, 0.01513527, 0.003110405, 0.003110405, 0.003110405, 0.004672957, 0.01513527, 0.003110516, 0.003110405, 0.003110516, 0.01198762, 0.01356389, 0.004672846, 0.01198762, 0.01355655, 0.004672846, 0.004672846, 0.003110405, 0.004672957, 0.01356389, 0.01513527, 0.003110405, 0.003110405, 0.003110406, 0.004672846, 0.003110516, 0.003110405, 0.003110406, 0.01356377, 0.01355655, 0.01355655, 0.01199252, 0.003110405, 0.01513527, 0.003110516, 0.004672846, 0.003110516, 0.004672957, 0.003110406, 0.003110516, 0.01356377, 0.003110405, 0.003110405, 0.01355655, 0.003110405, 0.004672957, 0.01513527, 0.003110405, 0.001552827, 0.01198762, 0.003110405, 0.01198751, 0.01041858, 0.004672846, 0.004672846, 0.01190976, 0.004672846, 0.01198762, 0.003110405, 0.01356389, 0.01199241, 0.01198762, 0.01355655, 0.003110405, 0.01355655, 0.01355655, 0.01198751, 0.003110516, 0.003110405], [0.01790327, 0.01230653, 0.01568061, 0.008909527, 0.01227238, 0.01568071, 0.008909322, 0.02128497, 0.01568071, 0.01230653, 0.01568071, 0.01568071, 0.01227238, 0.01230643, 0.01230612, 0.01790305, 0.01568061, 0.01568071, 0.01568061, 0.0101009, 0.01230643, 0.01448779, 0.01230643, 0.01568071, 0.01568071, 0.01568071, 0.01568071, 0.01568061, 0.01568071, 0.010101, 0.01568071, 0.01790327, 0.01568071, 0.01568061, 0.01230643, 0.01568071, 0.01230612, 0.008909527, 0.01230643, 0.01568061, 0.01568061, 0.01568071, 0.01230612, 0.01230643, 0.01227249, 0.01790327, 0.010101, 0.02128497, 0.01568061, 0.01790327, 0.01230643, 0.01568061, 0.01790327, 0.01227249, 0.02128497, 0.01568071, 0.01568071, 0.01568061, 0.008909527, 0.01568071, 0.01230653, 0.01227238, 0.01568061, 0.01227249, 0.01568071, 0.01790347, 0.01568061, 0.008909217, 0.01230643, 0.01568071, 0.01230643, 0.006711296, 0.01568061, 0.02128497, 0.01790347, 0.01230643, 0.01568071, 0.01568071, 0.006711501, 0.01568061, 0.01790327, 0.01790327, 0.01568071, 0.01790305, 0.01568061, 0.01448779, 0.01227238, 0.01230653, 0.01568071, 0.01230612, 0.01790327, 0.0145213, 0.01790327, 0.01230643, 0.006711501, 0.01568071, 0.02128497, 0.01568071, 0.01230653, 0.01230643], [0.0, 0.001452219, 0.001451292, 0.01492438, 0.04545488, 0.01492607, 0.04697227, 0.001452219, 0.001452255, 0.01470569, 0.001451416, 0.001451281, 0.001451281, 0.01639821, 0.01492607, 8.496381e-07, 0.01639821, 0.01639821, 0.02985126, 0.03030355, 0.03134596, 0.01470569, 0.001452231, 0.001452219, 0.01787312, 0.01492607, 0.01639821, 0.0, 0.01492607, 0.001451281, 0.0454541, 0.01492438, 0.0163991, 0.0163991, 0.0, 0.001451416, 0.0151514, 8.496381e-07, 0.0151514, 0.01639996, 0.01617839, 0.001452168, 0.02985126, 0.01492607, 0.01470569, 0.01492607, 0.0163991, 0.0163991, 0.001451281, 0.0, 0.001451281, 0.001452155, 0.01787552, 0.04697312, 0.01617842, 0.001452155, 0.001451281, 0.01470655, 0.04697312, 0.001452219, 0.03179883, 0.001452155, 0.001452219, 0.001452168, 0.0163991, 0.01492607, 0.0163991, 0.01662467, 0.0166256, 0.04697227, 0.02985126, 0.03134596, 0.01685606, 0.01639996, 0.001452255, 0.002902806, 0.01639996, 0.01470569, 0.0454541, 0.001452219, 0.01639821, 0.0151514, 0.03179978, 0.001452255, 0.01639821, 0.04697312, 0.01787651, 0.01492438, 0.03179806, 0.02985042, 0.001449361, 0.001451281, 0.0478144, 0.01639821, 0.0151514, 0.01492438, 0.01492438, 0.001452219, 0.02985042, 0.01492607]]
integralef = [[39373.01, 86619.55, 95039.77, 102996.7, 110658.1, 119356.8, 127079.4, 135684.3, 143719.8, 152460.7, 161013.7, 168901.1, 177068.1, 185207.8, 193556.1, 202183.4, 209519.1, 219270.2, 227082.6, 235121.3, 242858.3, 251253.0, 259149.4, 268396.1, 276046.7, 284540.4, 293261.8, 301267.3, 309986.0, 318117.2, 324767.8, 334254.1, 342811.8, 350558.3, 359318.1, 367280.6, 375000.3, 383005.7, 391031.7, 398763.8, 407169.0, 415363.8, 424185.9, 432294.3, 441198.5, 449401.5, 457700.0, 466288.7, 474427.5, 482313.0, 490523.9, 499113.4, 507063.1, 514963.3, 523655.5, 532271.3, 541301.3, 548976.9, 556938.3, 565202.6, 573823.9, 582775.6, 592227.8, 598302.8, 607713.8, 615254.1, 624299.3, 633009.4, 640830.4, 648200.4, 656537.4, 662149.3, 672784.1, 681362.0, 689245.3, 698495.8, 707234.6, 715576.0, 723278.6, 731228.1, 739958.5, 748613.5, 756112.6, 765379.1, 772587.4, 781200.4, 790658.7, 799078.3, 806911.9, 816021.1, 825006.3, 832748.4, 841041.1, 844314.2, 857097.7, 865735.3, 874743.8, 883094.4, 892125.4, 898938.3], [344234.6, 752194.7, 822679.4, 896067.4, 961113.1, 1038531.0, 1102039.0, 1164207.0, 1252428.0, 1315338.0, 1383193.0, 1463152.0, 1539295.0, 1605952.0, 1678348.0, 1739514.0, 1819941.0, 1901519.0, 1969051.0, 2039011.0, 2100704.0, 2180559.0, 2258684.0, 2323258.0, 2393606.0, 2470915.0, 2544743.0, 2609493.0, 2701733.0, 2748757.0, 2806391.0, 2896091.0, 2977851.0, 3039703.0, 3116480.0, 3190394.0, 3257480.0, 3329587.0, 3398716.0, 3457700.0, 3527849.0, 3583006.0, 3675304.0, 3751786.0, 3826085.0, 3890749.0, 3975844.0, 4050451.0, 4109838.0, 4189655.0, 4238383.0, 4328337.0, 4391205.0, 4461806.0, 4524707.0, 4615933.0, 4689092.0, 4751356.0, 4833605.0, 4900910.0, 4949909.0, 5031646.0, 5123289.0, 5205277.0, 5279086.0, 5320224.0, 5403253.0, 5483593.0, 5552377.0, 5608470.0, 5692878.0, 5791284.0, 5829230.0, 5903543.0, 5970155.0, 6050803.0, 6126581.0, 6178146.0, 6255039.0, 6325051.0, 6414951.0, 6474153.0, 6551216.0, 6641303.0, 6699152.0, 6783844.0, 6872105.0, 6891564.0, 7007132.0, 7092574.0, 7172963.0, 7245940.0, 7317992.0, 7378043.0, 7424693.0, 7478892.0, 7546610.0, 7677969.0, 7769503.0, 7801701.0], [2328887.0, 4933469.0, 5483861.0, 5913838.0, 6307839.0, 6893205.0, 7394242.0, 7771705.0, 8374174.0, 8663501.0, 9201670.0, 9826287.0, 1.023405e+07, 1.079073e+07, 1.111299e+07, 1.184213e+07, 1.19681e+07, 1.27554e+07, 1.284966e+07, 1.347812e+07, 1.403545e+07, 1.430943e+07, 1.4972e+07, 1.548726e+07, 1.595529e+07, 1.63239e+07, 1.6814e+07, 1.742556e+07, 1.803821e+07, 1.822766e+07, 1.868837e+07, 1.902366e+07, 1.994309e+07, 2.027565e+07, 2.086193e+07, 2.120994e+07, 2.165659e+07, 2.246824e+07, 2.274965e+07, 2.30639e+07, 2.371069e+07, 2.348262e+07, 2.415947e+07, 2.462076e+07, 2.529584e+07, 2.595321e+07, 2.662706e+07, 2.712671e+07, 2.739842e+07, 2.806646e+07, 2.877549e+07, 2.861015e+07, 2.9305e+07, 2.998831e+07, 3.025584e+07, 3.073813e+07, 3.126072e+07, 3.149961e+07, 3.243297e+07, 3.29159e+07, 3.36616e+07, 3.39112e+07, 3.392131e+07, 3.459552e+07, 3.509494e+07, 3.558632e+07, 3.662232e+07, 3.710554e+07, 3.705313e+07, 3.805455e+07, 3.712076e+07, 3.843616e+07, 3.951527e+07, 3.937862e+07, 4.013178e+07, 4.094416e+07, 4.114399e+07, 4.072154e+07, 4.115992e+07, 4.194799e+07, 4.340721e+07, 4.323294e+07, 4.43555e+07, 4.420087e+07, 4.468555e+07, 4.546027e+07, 4.56598e+07, 4.614707e+07, 4.733527e+07, 4.678666e+07, 4.832228e+07, 4.809158e+07, 4.781434e+07, 4.941181e+07, 4.949736e+07, 4.959055e+07, 5.047767e+07, 5.058148e+07, 5.111105e+07, 5.156985e+07]]
derivee_maxf = [[36050.69, 40031.29, -40003.51, 103873.8, 55230.7, 40170.39, 40046.62, -112817.7, -40059.11, 143183.9, 132082.5, -143089.3, 140259.9, 40059.11, 40059.11, 40032.71, 132787.4, 132083.7, -132082.5, -56344.65, 19998.96, -153033.6, 20046.22, -140355.2, -110368.1, 114855.2, 114788.9, -122189.5, 39975.77, -114855.2, -152716.6, -124738.4, 140169.1, 37480.53, -39161.04, -40086.96, -37530.67, 131923.9, 40088.39, -37529.33, -19985.07, 95856.3, -114855.2, 58832.7, 112823.5, -37529.33, -37529.33, -37529.33, -40031.29, -51003.4, 132881.1, 140348.2, -37578.26, -37529.33, -34684.15, -60223.73, -37529.33, -39975.77, -39161.04, 103680.0, 112623.1, 140169.1, -93087.29, -40031.29, -142717.7, 39162.43, 59973.5, -34642.46, -55232.0, 39161.04, 40031.29, 118395.3, -19985.07, 36763.43, 152628.6, 37529.33, -52045.54, 132083.7, 39054.91, 20040.74, 152503.7, -40142.8, -105840.0, 103840.7, 56528.54, 60140.09, 124964.0, 52044.31, 36763.43, 36763.43, 124797.3, 103576.4, -101607.7, 121815.5, -19985.07, 121815.5, 124576.0, 124576.0, 20103.49, -36857.45], [-1935649.0, 990768.2, 914652.3, 647059.7, 835801.3, 923104.0, 615535.3, 1601684.0, 973873.3, 928565.3, 753288.3, -1125365.0, 1133246.0, -1033498.0, 1125353.0, 1225696.0, -1100889.0, -973288.3, 857097.9, 752197.3, 927929.2, 1126463.0, -990458.3, 1055029.0, 1032839.0, 1056405.0, -923104.0, 1067185.0, -1157593.0, 1100900.0, 916123.0, -1055029.0, -991813.1, -986047.9, 1100900.0, -1034818.0, -989050.5, 989084.6, 840955.2, -904296.5, 1034808.0, -973873.3, 1053647.0, -686675.6, 964118.8, -975045.2, -736400.7, 1193528.0, 1034808.0, -1033498.0, 1055029.0, 1032171.0, 1148414.0, 984644.3, 1273116.0, 1053657.0, 1053657.0, -1056394.0, -989084.6, -924307.5, 914944.0, 968937.8, 911899.5, 928554.7, -1156085.0, 857097.9, 934005.3, 909573.3, 862168.6, -965863.6, -914954.4, -375114.0, 1125353.0, 1120465.0, 1126463.0, -1055029.0, 1024376.0, 1033498.0, -749796.2, 857097.9, 1112644.0, 1126442.0, -981916.8, -1359770.0, 1033488.0, 1126463.0, -1223793.0, -909615.0, -1055029.0, -909573.3, 1129589.0, 1067156.0, -1055029.0, 973873.3, 686675.6, 1338346.0, 990435.6, -1033498.0, 909573.3, -1135697.0], [0.0, -1003620.0, -1048220.0, 1.101978e+07, 2.921415e+07, 1.10242e+07, -2.568001e+07, -1047508.0, -256064.3, 8167390.0, -982831.1, -1086760.0, 1018837.0, -1.210726e+07, 1.103569e+07, 637.5983, 1.209886e+07, -1.079504e+07, 1.777421e+07, 2.239088e+07, -2.175148e+07, 9644176.0, -1055949.0, 1004501.0, 1.209046e+07, 1.102803e+07, -8705868.0, 0.0, 1.102803e+07, 1063135.0, 3.305278e+07, 1.101214e+07, -1.101273e+07, -1.101273e+07, 0.0, 983457.9, 1.111525e+07, -637.1556, 1.136226e+07, -1.1044e+07, -8316710.0, 1031791.0, 1.917916e+07, 1.078829e+07, 1.072325e+07, 9731172.0, -1.183579e+07, -1.078829e+07, 1018837.0, 0.0, -999319.4, -1003307.0, -9730610.0, -2.401536e+07, 1.101414e+07, 1072913.0, -998044.8, 8514172.0, -3.314526e+07, 1071682.0, -2.239088e+07, -1004459.0, -1048175.0, -1054720.0, -1.102803e+07, 1.105938e+07, -9093565.0, -8399205.0, -9130862.0, -3.309868e+07, 2.173638e+07, -1.682816e+07, -1.258738e+07, -1.183651e+07, 1086851.0, 995671.9, -8271497.0, 8167390.0, 2.39749e+07, 1073768.0, -1.078771e+07, 1.139391e+07, -2.232885e+07, 1019520.0, -1.102743e+07, -3.41545e+07, -1.088897e+07, 1.102743e+07, -2.238969e+07, 2.167621e+07, -1021027.0, 1018837.0, 2.701617e+07, -8428611.0, 9296393.0, 1.078771e+07, 7876738.0, -1067910.0, 1.716034e+07, 1.099748e+07]]
sommef = [[6995552.0, 1.380682e+07, 1.382191e+07, 1.382957e+07, 1.385962e+07, 1.385946e+07, 1.388049e+07, 1.387933e+07, 1.387348e+07, 1.38712e+07, 1.395518e+07, 1.398681e+07, 1.400157e+07, 1.389558e+07, 1.394521e+07, 1.403084e+07, 1.392832e+07, 1.394065e+07, 1.401844e+07, 1.396484e+07, 1.398561e+07, 1.398742e+07, 1.400368e+07, 1.400583e+07, 1.409324e+07, 1.410908e+07, 1.405836e+07, 1.411828e+07, 1.412179e+07, 1.404906e+07, 1.403745e+07, 1.415138e+07, 1.40979e+07, 1.409086e+07, 1.411361e+07, 1.416948e+07, 1.417563e+07, 1.419247e+07, 1.421904e+07, 1.420498e+07, 1.4128e+07, 1.417802e+07, 1.417907e+07, 1.423542e+07, 1.427671e+07, 1.419772e+07, 1.424497e+07, 1.419712e+07, 1.422532e+07, 1.432919e+07, 1.420642e+07, 1.424779e+07, 1.424307e+07, 1.433259e+07, 1.427287e+07, 1.437339e+07, 1.430292e+07, 1.437394e+07, 1.435422e+07, 1.42667e+07, 1.440176e+07, 1.443068e+07, 1.434099e+07, 1.439314e+07, 1.439653e+07, 1.444939e+07, 1.445905e+07, 1.437995e+07, 1.439994e+07, 1.447942e+07, 1.44547e+07, 1.448134e+07, 1.451962e+07, 1.448672e+07, 1.440165e+07, 1.442884e+07, 1.444774e+07, 1.454992e+07, 1.44624e+07, 1.455483e+07, 1.445882e+07, 1.459157e+07, 1.450793e+07, 1.450192e+07, 1.450292e+07, 1.452226e+07, 1.450644e+07, 1.460899e+07, 1.453381e+07, 1.46358e+07, 1.465213e+07, 1.450948e+07, 1.466717e+07, 1.458812e+07, 1.467105e+07, 1.460688e+07, 1.45994e+07, 1.471232e+07, 1.472925e+07, 1.471206e+07], [6.11682e+07, 1.206026e+08, 1.205737e+08, 1.204287e+08, 1.206765e+08, 1.200109e+08, 1.213037e+08, 1.21362e+08, 1.216478e+08, 1.208056e+08, 1.211086e+08, 1.216337e+08, 1.212762e+08, 1.221677e+08, 1.21194e+08, 1.21369e+08, 1.220269e+08, 1.21584e+08, 1.217116e+08, 1.225499e+08, 1.213914e+08, 1.226903e+08, 1.220706e+08, 1.225556e+08, 1.2186e+08, 1.21862e+08, 1.222545e+08, 1.224027e+08, 1.224474e+08, 1.225511e+08, 1.227932e+08, 1.225216e+08, 1.226744e+08, 1.22715e+08, 1.224459e+08, 1.229196e+08, 1.226686e+08, 1.232701e+08, 1.234729e+08, 1.236752e+08, 1.230055e+08, 1.231557e+08, 1.237754e+08, 1.237961e+08, 1.233666e+08, 1.237519e+08, 1.246363e+08, 1.239226e+08, 1.230756e+08, 1.242917e+08, 1.243225e+08, 1.2396e+08, 1.240476e+08, 1.244297e+08, 1.241968e+08, 1.240876e+08, 1.243739e+08, 1.2514e+08, 1.242358e+08, 1.246782e+08, 1.248443e+08, 1.242507e+08, 1.246103e+08, 1.247237e+08, 1.249717e+08, 1.250202e+08, 1.250092e+08, 1.244297e+08, 1.255129e+08, 1.2554e+08, 1.252331e+08, 1.250823e+08, 1.257994e+08, 1.256608e+08, 1.253152e+08, 1.261827e+08, 1.251045e+08, 1.260631e+08, 1.258175e+08, 1.266236e+08, 1.261588e+08, 1.267934e+08, 1.270812e+08, 1.264956e+08, 1.264058e+08, 1.268122e+08, 1.267976e+08, 1.265043e+08, 1.270273e+08, 1.265885e+08, 1.270339e+08, 1.262479e+08, 1.27141e+08, 1.274634e+08, 1.271685e+08, 1.279188e+08, 1.278733e+08, 1.275354e+08, 1.284119e+08, 1.271028e+08], [4.41547e+08, 8.187791e+08, 8.081631e+08, 8.06578e+08, 8.14497e+08, 8.129788e+08, 7.991123e+08, 8.096547e+08, 7.995604e+08, 8.163816e+08, 8.069524e+08, 8.115602e+08, 8.134829e+08, 8.122371e+08, 8.066925e+08, 8.074035e+08, 8.141728e+08, 8.262024e+08, 8.08813e+08, 8.175059e+08, 8.341387e+08, 8.290006e+08, 8.273778e+08, 8.049071e+08, 8.174875e+08, 8.157875e+08, 8.250771e+08, 8.151818e+08, 8.218972e+08, 8.412298e+08, 8.099071e+08, 8.274934e+08, 8.276159e+08, 8.241907e+08, 8.223293e+08, 8.303028e+08, 8.074047e+08, 8.193501e+08, 8.366676e+08, 8.271759e+08, 8.355214e+08, 8.074623e+08, 8.262406e+08, 8.269744e+08, 8.200598e+08, 8.397291e+08, 8.284051e+08, 8.361555e+08, 8.488354e+08, 8.451354e+08, 8.194724e+08, 8.600316e+08, 8.334889e+08, 8.381903e+08, 8.214735e+08, 8.312154e+08, 8.312754e+08, 8.522116e+08, 8.29498e+08, 8.316643e+08, 8.473699e+08, 8.575089e+08, 8.360924e+08, 8.488132e+08, 8.208516e+08, 8.335675e+08, 8.339802e+08, 8.619188e+08, 8.317318e+08, 8.302597e+08, 8.568624e+08, 8.39896e+08, 8.337921e+08, 8.413445e+08, 8.336257e+08, 8.417856e+08, 8.504393e+08, 8.391587e+08, 8.366214e+08, 8.440364e+08, 8.286995e+08, 8.343034e+08, 8.580222e+08, 8.297437e+08, 8.865942e+08, 8.309821e+08, 8.334467e+08, 8.465201e+08, 8.538561e+08, 8.484457e+08, 8.489188e+08, 8.669893e+08, 8.567608e+08, 8.740754e+08, 8.473418e+08, 8.415585e+08, 8.359965e+08, 8.633757e+08, 8.49228e+08, 8.493533e+08]]

def type_aleatoire() :
    return random.choice(parametres)


def type_aleatoire_pondere() :
    #à implémenter manuellement
    return random.choice(parametres)
    

def donnees_aleatoires(type_noeud, n, integralef, derivee_maxf, deltaf, sommef) :
    if type_noeud == 'delta' :
        donnee = random.choice(deltaf[n])
    if type_noeud == 'derivee_max' :
        donnee = random.choice(derivee_maxf[n])
    if type_noeud == 'integrale' :
        donnee = random.choice(integralef[n])
    if type_noeud == 'somme' :
        donnee = random.choice(sommef[n])
    return donnee
    
    
def verif_noeud(type_noeud, donnee) :
    if type_noeud == 'delta' :
        condition = donnee > random.choice(seuil_delta)
    if type_noeud == 'derivee_max' :
        condition = donnee > random.choice(seuil_derivee_max)
    if type_noeud == 'integrale' :
        condition = donnee > random.choice(seuil_integrale)
    if type_noeud == 'somme' :
        condition = donnee > random.choice(seuil_somme)
    return condition
    

def arbre_decisionnel(n, integralef, derivee_maxf, deltaf, sommef) :
    vote_noeuds = 0
    vote_arbre = 0
    nb_noeuds = random.randint(nb_noeuds_min, nb_noeuds_max)
    type_noeud = type_aleatoire()
    for i in range (0,nb_noeuds) :
        donnee = donnees_aleatoires(type_noeud, n, integralef, derivee_maxf, deltaf, sommef)
        condition = verif_noeud(type_noeud, donnee)
        if condition :
            vote_noeuds =+ 1
            i =+ 1
            type_noeud = type_aleatoire_pondere()
        else :
            type_noeud = type_aleatoire()
        if vote_noeuds >= (nb_noeuds/2) :
            vote_arbre =+ 1
    return vote_arbre
        
def foret(integralef, derivee_maxf, deltaf, sommef) :
    vote_foret = 0
    for _ in range (0, nb_arbres) :
        for n in range(0, nb_resistances) :
            vote_arbre = arbre_decisionnel(n, integralef, derivee_maxf, deltaf, sommef)
            vote_foret = vote_foret + vote_arbre
    if vote_foret >= (nb_arbres/2) :
        DMMP = True
    return DMMP

DMMP = foret(integralef, derivee_maxf, deltaf, sommef)
print("DMMP :", DMMP)